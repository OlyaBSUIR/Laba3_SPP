//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WheatherInfo", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary1")]
    [System.SerializableAttribute()]
    public partial class WheatherInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string humadityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string pressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string speedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string temperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string humadity {
            get {
                return this.humadityField;
            }
            set {
                if ((object.ReferenceEquals(this.humadityField, value) != true)) {
                    this.humadityField = value;
                    this.RaisePropertyChanged("humadity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                if ((object.ReferenceEquals(this.lastUpdateField, value) != true)) {
                    this.lastUpdateField = value;
                    this.RaisePropertyChanged("lastUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string pressure {
            get {
                return this.pressureField;
            }
            set {
                if ((object.ReferenceEquals(this.pressureField, value) != true)) {
                    this.pressureField = value;
                    this.RaisePropertyChanged("pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string speed {
            get {
                return this.speedField;
            }
            set {
                if ((object.ReferenceEquals(this.speedField, value) != true)) {
                    this.speedField = value;
                    this.RaisePropertyChanged("speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string temperature {
            get {
                return this.temperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.temperatureField, value) != true)) {
                    this.temperatureField = value;
                    this.RaisePropertyChanged("temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mycompany.com/whether/2010/05/24", ConfigurationName="ServiceReference1.WhetherService")]
    public interface WhetherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfo", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoResponse" +
            "")]
        WcfServiceClient.ServiceReference1.WheatherInfo GetWhetherInfo(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfo", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoResponse" +
            "")]
        System.Threading.Tasks.Task<WcfServiceClient.ServiceReference1.WheatherInfo> GetWhetherInfoAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoSerializ" +
            "ed", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoSerializ" +
            "edResponse")]
        string GetWhetherInfoSerialized(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoSerializ" +
            "ed", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/GetWhetherInfoSerializ" +
            "edResponse")]
        System.Threading.Tasks.Task<string> GetWhetherInfoSerializedAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/SendEmailAsync", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/SendEmailAsyncResponse" +
            "")]
        void SendEmailAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mycompany.com/whether/2010/05/24/WhetherService/SendEmailAsync", ReplyAction="http://www.mycompany.com/whether/2010/05/24/WhetherService/SendEmailAsyncResponse" +
            "")]
        System.Threading.Tasks.Task SendEmailAsyncAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WhetherServiceChannel : WcfServiceClient.ServiceReference1.WhetherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WhetherServiceClient : System.ServiceModel.ClientBase<WcfServiceClient.ServiceReference1.WhetherService>, WcfServiceClient.ServiceReference1.WhetherService {
        
        public WhetherServiceClient() {
        }
        
        public WhetherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WhetherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhetherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WhetherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceClient.ServiceReference1.WheatherInfo GetWhetherInfo(string city) {
            return base.Channel.GetWhetherInfo(city);
        }
        
        public System.Threading.Tasks.Task<WcfServiceClient.ServiceReference1.WheatherInfo> GetWhetherInfoAsync(string city) {
            return base.Channel.GetWhetherInfoAsync(city);
        }
        
        public string GetWhetherInfoSerialized(string city) {
            return base.Channel.GetWhetherInfoSerialized(city);
        }
        
        public System.Threading.Tasks.Task<string> GetWhetherInfoSerializedAsync(string city) {
            return base.Channel.GetWhetherInfoSerializedAsync(city);
        }
        
        public void SendEmailAsync() {
            base.Channel.SendEmailAsync();
        }
        
        public System.Threading.Tasks.Task SendEmailAsyncAsync() {
            return base.Channel.SendEmailAsyncAsync();
        }
    }
}
